//
//  HomeViewController.swift
//  Teste Solutis-Santander
//
//  Created by Virtual Machine on 23/09/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeDisplayLogic: AnyObject
{
    func displayUserData(viewModel: Home.UserData.ViewModel)
    func displayExtratos(viewModel: Home.ExtratosData.ViewModel)
}

class HomeViewController: UIViewController, HomeDisplayLogic, UITableViewDataSource, UITableViewDelegate
{
    var interactor: HomeBusinessLogic?
    var router: (NSObjectProtocol & HomeRoutingLogic & HomeDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = HomeInteractor()
        let presenter = HomePresenter()
        let router = HomeRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        gradient()
        showUserData()
        showExtratos()
    }
    
    // MARK: Do something
    
    @IBOutlet weak var nomeTextField: UILabel!
    @IBOutlet weak var saldoTextField: UILabel!
    @IBOutlet weak var cpfTextField: UILabel!
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var gradientView: UIView!
    @IBAction func logoutButton(_ sender: UIButton) {
        showAlert()
    }
    
    var listaExtratos:Array<Extratos> = []
    
    func showUserData()
    {
        let request = Home.UserData.Request()
        interactor?.showUserData(request: request)
    }
    
    func showExtratos()
    {
        let request = Home.ExtratosData.Request()
        interactor?.showExtratos(request: request)
    }
    
    func displayUserData(viewModel: Home.UserData.ViewModel)
    {
        nomeTextField.text = viewModel.user.nome
        saldoTextField.text = String(viewModel.user.formatedSaldo)
        cpfTextField.text = viewModel.user.formatedCpf
    }
    
    func displayExtratos(viewModel: Home.ExtratosData.ViewModel) {
        listaExtratos = viewModel.extrato
        tableView.reloadData()
    }
    
    //MARK: - Tableview
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return listaExtratos.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "celulaExtrato", for: indexPath) as! ExtratoViewCell
        cell.descricaoLabel.text = listaExtratos[indexPath.row].descricao
        cell.dataLabel.text = listaExtratos[indexPath.row].formatedData
        cell.valorLabel.text = listaExtratos[indexPath.row].formatedValor
        if listaExtratos[indexPath.row].valor < 0 {
            cell.tipoLabel.text = "Pagamento"
            cell.valorLabel.textColor = UIColor.red
        } else {
            cell.tipoLabel.text = "Recebimento"
            cell.valorLabel.textColor = UIColor(red: 17.0/255.0, green: 200.0/255.0, blue: 0.0/255.0, alpha: 1.0)
        }
        return cell
    }
    //MARK: - Gradient
    func gradient() {
        let gradientColor = CAGradientLayer()
        gradientColor.colors = [UIColor(red: 176.0/255.0, green: 226.0/255.0, blue: 255.0/255.0, alpha: 1.0).cgColor,UIColor(red: 28.0/255.0, green: 120.0/255.0, blue: 212.0/255.0, alpha: 1.0).cgColor]
        gradientColor.frame = gradientView.bounds
        gradientColor.startPoint = CGPoint(x: 0, y: 1)
        gradientColor.endPoint = CGPoint(x: 1, y: 1)
        gradientView.layer.insertSublayer(gradientColor, at: 0)
    }
    //MARK: - Alert
    func showAlert() {
        let logoutAlert = UIAlertController(title: "Sair", message: "Deseja mesmo sair?", preferredStyle: UIAlertController.Style.alert)
        logoutAlert.addAction(UIAlertAction(title: "Sair", style: .default, handler: { (action:UIAlertAction!) in
            self.performSegue(withIdentifier: "logout", sender: self)
        }))
        logoutAlert.addAction(UIAlertAction(title: "Cancelar", style: .cancel, handler: { (action:UIAlertAction!) in
            logoutAlert.dismiss(animated: true, completion: nil)
        }))
        
        present(logoutAlert, animated: true, completion: nil)
    }
}
