//
//  VipViewController.swift
//  Teste Solutis-Santander
//
//  Created by Virtual Machine on 16/09/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginDisplayLogic: AnyObject
{
    func displayHome(viewModel: LoginModels.Login.ViewModel)
    func displayError()
    func displayUser(username:String)
}

class LoginViewController: UIViewController, LoginDisplayLogic
{
    
    @IBOutlet weak var usernameTextField: UITextField!
    @IBOutlet weak var passwordTextField: UITextField!
    @IBOutlet weak var errorLabel: UILabel!
    @IBOutlet weak var loginButtonOutlet: UIButton!
    @IBOutlet weak var saveUser: UISwitch!
    
    
    var interactor: LoginBusinessLogic?
    var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = LoginInteractor()
        let presenter = LoginPresenter()
        let router = LoginRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    @IBAction func loginButton(_ sender: UIButton) {
        loginButtonOutlet.isEnabled = false
        doLogin()
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        usernameTextField.addTarget(self, action:#selector(hideErrorLabel),
                                 for : .editingChanged)
        passwordTextField.addTarget(self, action:#selector(hideErrorLabel),
                                    for : .editingChanged)
        interactor?.getKeychain()
    }
    
    // MARK: Do something
    
    func doLogin()
    {
        let username = usernameTextField.text!
        let password = passwordTextField.text!
        let saveUser = saveUser.isOn
        let request = LoginModels.Login.Request(username: username, password: password, checked: saveUser)
        interactor?.doLogin(request: request)
    }
    
    @IBAction func switchSaveUser(_ sender: UISwitch) {
        deleteKeychain()
    }
    
    
    
    func displayHome(viewModel: LoginModels.Login.ViewModel)
    {
        router?.routeToHome(segue: nil)
    }
    
    func displayError() {
        errorLabel.isHidden = false
        loginButtonOutlet.isEnabled = true
    }
    
    @objc func hideErrorLabel() {
        errorLabel.isHidden = true
    }
    
    func deleteKeychain() {
            interactor?.clearKeychain()
    }
    
    func displayUser(username: String) {
        usernameTextField.text = username
    }
}

